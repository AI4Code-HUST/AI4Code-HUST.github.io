{"version":3,"sources":["webpack:///./src/components/resource-link.js","webpack:///./src/pages/resources.js","webpack:///./src/components/post-link.js"],"names":["ResourceLink","resource","language","useLanguageContext","className","href","url","target","rel","name","description","descriptionvn","ResourcePage","data","yamlEdges","allResourcesYaml","edges","mdEdges","allMarkdownRemark","Resources","filter","edge","node","map","key","id","Posts","frontmatter","date","post","title","PostLink","to","path","thumbnail","src","alt","titlevn"],"mappings":"sJA2BeA,EAxBM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACdC,EAAaC,cAAbD,SAER,OACE,6BAASE,UAAU,QACjB,gCACE,wBAAIA,UAAU,cACZ,uBACEC,KAAMJ,EAASK,IACfC,OAAO,SACPC,IAAI,sBACJJ,UAAU,aAETH,EAASQ,OAGd,yBAAKL,UAAU,aACC,OAAbF,EAAoBD,EAASS,YAAcT,EAASU,kB,wBCyChDC,UArDM,SAAC,GAKf,IAAD,IAJJC,KAC6BC,EAGzB,EAHFC,iBAAoBC,MACQC,EAE1B,EAFFC,kBAAqBF,MAGfd,EAAaC,cAAbD,SAEFiB,EAAYL,EACfM,QAAO,SAACC,GAAD,QAAYA,EAAKC,KAAKb,QAC7Bc,KAAI,SAACF,GAAD,OACH,kBAAC,EAAD,CAAcG,IAAKH,EAAKC,KAAKG,GAAIxB,SAAUoB,EAAKC,KAAMpB,SAAUA,OAG9DwB,EAAQT,EACXG,QAAO,SAACC,GAAD,QAAYA,EAAKC,KAAKK,YAAYC,QACzCL,KAAI,SAACF,GAAD,OAAU,kBAAC,IAAD,CAAUG,IAAKH,EAAKC,KAAKG,GAAII,KAAMR,EAAKC,UAEzD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeQ,MAAoB,OAAb5B,EAAoB,YAAc,eACxD,4BAAkB,OAAbA,EAAoB,YAAc,cACvC,4BAAkB,OAAbA,EAAoB,QAAU,WACnC,yBAAKE,UAAU,mBACC,OAAbF,EACC,4KAIA,yKAIF,yBAAKE,UAAU,SAASe,IAG1B,4BAAkB,OAAbjB,EAAoB,YAAc,cACvC,yBAAKE,UAAU,mBACC,OAAbF,EACC,yFAIA,wGAIF,yBAAKE,UAAU,SAASsB,O,oCCvDhC,iDA6BeK,IAzBE,SAAC,GAAc,IAAZF,EAAW,EAAXA,KACV3B,EAAaC,cAAbD,SAER,OACE,6BAASE,UAAU,SACjB,kBAAC,OAAD,CAAM4B,GAAIH,EAAKF,YAAYM,QACtBJ,EAAKF,YAAYO,WAClB,yBACEC,IAAKN,EAAKF,YAAYO,UACtBE,IAAKP,EAAKF,YAAYG,MAAQ,qBAIpC,gCACE,wBAAI1B,UAAU,cACZ,kBAAC,OAAD,CAAM4B,GAAIH,EAAKF,YAAYM,KAAM7B,UAAU,aAC3B,OAAbF,EAAoB2B,EAAKF,YAAYG,MAAQD,EAAKF,YAAYU,UAGnE,yBAAKjC,UAAU,aAAayB,EAAKF,YAAYC","file":"component---src-pages-resources-js-9a526b7c978581fe6bd1.js","sourcesContent":["import React from \"react\";\nimport { useLanguageContext } from \"../contexts/language-context\";\n\nconst ResourceLink = ({ resource }) => {\n  const { language } = useLanguageContext();\n  \n  return (\n    <article className=\"card\">\n      <header>\n        <h2 className=\"post-title\">\n          <a\n            href={resource.url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"post-link\"\n          >\n            {resource.name}\n          </a>\n        </h2>\n        <div className=\"post-meta\">\n          {language === \"en\" ? resource.description : resource.descriptionvn}\n        </div>\n      </header>\n    </article>\n  );\n};\n\nexport default ResourceLink;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport ResourceLink from \"../components/resource-link\";\nimport PostLink from \"../components/post-link\";\nimport HelmetWrapper from \"../components/helmetWrapper\";\nimport { useLanguageContext } from \"../contexts/language-context\";\n\nconst ResourcePage = ({\n  data: {\n    allResourcesYaml: { edges: yamlEdges },\n    allMarkdownRemark: { edges: mdEdges },\n  },\n}) => {\n  const { language } = useLanguageContext();\n\n  const Resources = yamlEdges\n    .filter((edge) => !!edge.node.name)\n    .map((edge) => (\n      <ResourceLink key={edge.node.id} resource={edge.node} language={language} />\n    ));\n\n  const Posts = mdEdges\n    .filter((edge) => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map((edge) => <PostLink key={edge.node.id} post={edge.node} />);\n\n  return (\n    <Layout>\n      <HelmetWrapper title={language === \"en\" ? \"Resources\" : \"Tài nguyên\"} />\n      <h1>{language === \"en\" ? \"Resources\" : \"Tài nguyên\"}</h1>\n      <h2>{language === \"en\" ? \"Tools\" : \"Công cụ\"}</h2>\n      <div className=\"primary-content\">\n        {language === \"en\" ? (\n          <>\n            Our lab has built many tools from research, aiming at real-world application and technical transfer. You can check some tools below.\n          </>\n        ) : (\n          <>\n            Chúng tôi đã xây dựng nhiều công cụ từ các nghiên cứu, hướng tới ứng dụng và chuyển giao. Bạn có thể xem một số công cụ dưới đây.\n          </>\n        )}\n        <div className=\"grids\">{Resources}</div>\n      </div>\n\n      <h2>{language === \"en\" ? \"Resources\" : \"Tài nguyên\"}</h2>\n      <div className=\"primary-content\">\n        {language === \"en\" ? (\n          <>\n            Curated some good resources when joining the lab.\n          </>\n        ) : (\n          <>\n            Đã chọn lọc một số tài nguyên tốt khi tham gia phòng thí nghiệm.\n          </>\n        )}\n        <div className=\"grids\">{Posts}</div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default ResourcePage;\nexport const pageQuery = graphql`\n  query resourcePageQuery {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allResourcesYaml {\n      edges {\n        node {\n          id\n          description\n          descriptionvn\n          name\n          url\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { path: { regex: \"/resources/\" } } }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            titlevn\n            thumbnail\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { useLanguageContext } from \"../contexts/language-context\";\n\nconst PostLink = ({ post }) => {\n  const { language } = useLanguageContext();\n\n  return (\n    <article className=\"card \">\n      <Link to={post.frontmatter.path}>\n        {!!post.frontmatter.thumbnail && (\n          <img\n            src={post.frontmatter.thumbnail}\n            alt={post.frontmatter.title + \"- Featured Shot\"}\n          />\n        )}\n      </Link>\n      <header>\n        <h2 className=\"post-title\">\n          <Link to={post.frontmatter.path} className=\"post-link\">\n            {language === \"en\" ? post.frontmatter.title : post.frontmatter.titlevn}\n          </Link>\n        </h2>\n        <div className=\"post-meta\">{post.frontmatter.date}</div>\n      </header>\n    </article>\n  );\n};\n\nexport default PostLink;\n"],"sourceRoot":""}